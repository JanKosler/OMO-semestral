package cz.cvut.fel.omo.semestral.entity.beings;


import cz.cvut.fel.omo.semestral.entity.actions.Action;
import cz.cvut.fel.omo.semestral.entity.livingSpace.Room;
import cz.cvut.fel.omo.semestral.entity.systems.DeviceSystem;
import cz.cvut.fel.omo.semestral.manual.ManualRepo;
import cz.cvut.fel.omo.semestral.reporting.Report;
import cz.cvut.fel.omo.semestral.reporting.ReportVisitor;
import cz.cvut.fel.omo.semestral.tick.Tickable;

import java.util.Queue;

/**
 * Represents a pet in the smart home simulation.
 * * This class extends the {@link Being} class and adds pet-specific functionalities.
 */
public class Pet extends Being implements Tickable {
    /**
     * Constructs a new Pet with the specified name, action plan, and initial room.
     * @param petID The ID of the pet.
     * @param name The name of the pet.
     * @param room The initial room where the pet is located.
     * @param actionPlan The queue of actions that this pet will perform.
     */
    public Pet(int petID, String name, Room room, ManualRepo manualRepo, Queue<Action> actionPlan) {
        super(petID, name, room, manualRepo, actionPlan);
    }

    /**
     * Constructs a new Pet with the specified name, action plan, and initial room.
     * @param petID The ID of the pet.
     * @param name The name of the pet.
     * @param room The initial room where the pet is located.
     */
    public Pet(int petID, String name, Room room, ManualRepo manualRepo) {
        super(petID, name, room, manualRepo);
    }


    /**
     * This method is called on each tick of timer in the simulation.
     * It triggers the performance of the next action in the sequence.
     */
    @Override
    public void onTick() {
        performNextAction();
    }


    /**
     * Performs the next action in the action plan for this entity.
     * The method dequeues the next action from the action plan and executes it.
     * The actions can include changing rooms for the entity if the action specifies a Room object.
     * If the action plan is empty, no action is performed.
     */
    @Override
    public void performNextAction() {
        if (!actionPlan.isEmpty()) {
            Action nextAction = actionPlan.poll();

            switch (nextAction.getType()) {
                // Handling Being-specific actions
                case B_CHANGEROOM:
                    if(nextAction.getValue() instanceof Room) {
                        goTo((Room) nextAction.getValue());
                    }
                    break;
                default:
                    break;
            }

        }
    }

    /**
     * Accepts a visit from a ReportVisitor, allowing the visitor to perform operations specific to the type of this object.
     * This method is a part of the Visitor design pattern and is used to generate a report based on the type of Pet.
     *
     * @param visitor The ReportVisitor visiting this object.
     * @return A Report object specific to the type of this object, as generated by the visitor.
     */
    public Report accept(ReportVisitor visitor) {
        return visitor.visitPet(this);
    }

    @Override
    public String toString() {
        return "Pet{" + "beingID=" + beingID + ", name='" + name + '}';
    }
}
