package cz.cvut.fel.omo.semestral.entity.systems;

import cz.cvut.fel.omo.semestral.common.enums.UserInputType;
import cz.cvut.fel.omo.semestral.entity.devices.IDevice;
import cz.cvut.fel.omo.semestral.entity.devices.appliances.Appliance;
import cz.cvut.fel.omo.semestral.entity.devices.appliances.TV;
import cz.cvut.fel.omo.semestral.entity.devices.controllers.Controller;
import cz.cvut.fel.omo.semestral.entity.devices.sensors.MotionSensor;
import cz.cvut.fel.omo.semestral.entity.devices.sensors.UserInputSensor;
import cz.cvut.fel.omo.semestral.entity.livingSpace.Room;
import cz.cvut.fel.omo.semestral.reporting.Report;
import cz.cvut.fel.omo.semestral.reporting.ReportVisitor;
import cz.cvut.fel.omo.semestral.tick.Tickable;
import cz.cvut.fel.omo.semestral.common.enums.DeviceState;
import lombok.Getter;

import java.util.List;

/**
 * Abstract class representing a generic device system in the smart home simulation.
 * This class serves as a base for specific types of device systems, providing common functionalities and properties.
 * The purpose of device system is to aggregate devices and sensors that are related to each other.
 */
@Getter
public abstract class DeviceSystem implements Tickable {

    /** The list of allowed user input types for this device system. */
    private List<UserInputType> allowedUserInputTypes;

    /** The ID of the device system. */
    private int deviceSystemID;


    /**
     * Turns on the devices associated with this system.
     * This method should be overridden to provide specific turn-on behavior.
     */
    public void turnOn() {
        for(IDevice device : getDevices()) {
            if(device instanceof TV){
                ((TV) device).setIdle();
            } else{
                device.turnOn();
            }
        }
    }

    /**
     * Turns off the devices associated with this system.
     * This method should be overridden to provide specific turn-off behavior.
     */
    public void turnOff() {
        for(IDevice device : getDevices()) {
            device.turnOff();
        }
    }

    /**
     * Retrieves the appliance associated with this device system.
     *
     * @return An instance of Appliance associated with this system.
     */
    public Appliance getAppliance() {
        return null;
    }

    /**
     * Retrieves the motion sensor associated with this device system.
     * The sensor is used to detect motion in the room where this system is located.
     *
     * @return An instance of MotionSensor associated with this system.
     */
    public MotionSensor getMotionSensor() {
        return null;
    }

    /**
     * Retrieves the controller associated with this device system.
     * The controller is used to control the devices in this system.
     *
     * @return An instance of Controller associated with this system.
     */
    public Controller getController() {
        return null;
    }

    /**
     * Retrieves the UserInputSensor associated with this device system.
     * The sensor is used to detect and process user inputs for this system.
     *
     * @return An instance of UserInputSensor associated with this system.
     */
    public UserInputSensor getUserInputSensor() {
        return null;
    }

    /**
     * Accepts a visitor and returns a report generated by the visitor.
     *
     * @param visitor The visitor to accept.
     * @return A report generated by the visitor.
     */
    public Report accept(ReportVisitor visitor) {
        return visitor.visitDeviceSystem(this);
    }

    /**
     * Method called on each tick of the simulation.
     * Subclasses should override this method to define behavior that occurs on each tick.
     */
    @Override
    public void onTick() {}

    /**
     * Retrieves the total consumption of all devices in this system.
     *
     * @return The total consumption of all devices in this system.
     */
    public double getTotalConsumption() {
        return 0;
    }

    /**
     * Retrieves the total consumption of all devices in this system that are currently turned on.
     *
     * @return The total consumption of all devices in this system that are currently turned on.
     */
    public List<IDevice> getDevices() {
        return null;
    }

    /**
     * Retrieves the total consumption of all devices in this system that are currently turned on.
     *
     * @return The total consumption of all devices in this system that are currently turned on.
     */
    public void repair() {
        for(IDevice device : getDevices()) {
            if(device.getState() == DeviceState.MALFUNCTION) {
                device.repair();
            }
        }
    }

    /**
     * Sets the room where this device system is located.
     *
     * @param room The room where this device system is located.
     */
    public void setRooom(Room room){};

    /**
     * Sets the room where this device system is located.
     *
     * @param room The room where this device system is located.
     */
    public abstract void setRoom(Room room);
}
